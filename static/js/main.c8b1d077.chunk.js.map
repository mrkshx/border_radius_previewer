{"version":3,"sources":["components/border_radius_clipboard.jsx","components/border_square.jsx","App.js","reportWebVitals.js","index.js"],"names":["BorderRadiusClipboard","props","useState","clipboardText","copyToClipboard","useEffect","value","topLeft","topRight","bottomRight","bottomLeft","id","onChange","target","text","SliderWithTooltip","createSliderWithTooltip","Slider","BorderSquare","borderRadius","setBorderRadius","style","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","marks","0","100","tipFormatter","tipProps","placement","visible","max","prevState","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAsBeA,G,MAhBe,SAACC,GAAW,IAAD,EACEC,mBAAS,IADX,mBAChCC,EADgC,KACjBC,EADiB,KAQvC,OALAC,qBAAU,WACR,IAAMC,EAAM,kBAAD,OAAmBL,EAAMK,MAAMC,QAA/B,aAA2CN,EAAMK,MAAME,SAAvD,aAAoEP,EAAMK,MAAMG,YAAhF,aAAgGR,EAAMK,MAAMI,WAA5G,MACRN,EAAgBE,KACjB,CAACL,IAEE,sBAAKU,GAAG,0BAAR,UACL,uBAAOA,GAAG,qBAAqBL,MAAOH,EAAeS,SAAU,gBAAWN,EAAX,EAAEO,OAASP,MAAX,OAAuBF,EAAgBE,MACtG,cAAC,kBAAD,CAAiBQ,KAAMX,EAAvB,SACE,wBAAQQ,GAAG,gBAAX,sCCTAI,G,YAAoBC,YAAwBC,MA4FnCC,EA1FM,WAAO,IAAD,EACehB,mBACxC,CACEK,QAAS,GACTC,SAAU,GACVE,WAAY,GACZD,YAAa,KANU,mBAClBU,EADkB,KACJC,EADI,KASzB,OAAO,sBAAKC,MAAO,CAACC,oBAAoB,GAAD,OAAKH,EAAaZ,QAAlB,KAA8BgB,qBAAqB,GAAD,OAAKJ,EAAaX,SAAlB,KAA+BgB,uBAAuB,GAAD,OAAKL,EAAaT,WAAlB,KAAiCe,wBAAwB,GAAD,OAAKN,EAAaV,YAAlB,MAAmCE,GAAG,gBAArO,UACL,cAACI,EAAD,CACEW,MAAO,CACLC,EAAE,KACFC,IAAI,QAENC,aAAc,SAAAvB,GAAK,gBAAOA,EAAP,MACnBwB,SAAU,CACRC,UAAW,MACXC,SAAS,GAEX1B,MAAOa,EAAaZ,QACpB0B,IAAK,IACLrB,SAAU,SAAAN,GACRc,GAAgB,SAAAc,GAChB,OAAO,2BAAKA,GAAZ,IAAuB3B,QAASD,QAGlC6B,UAAU,kBACZ,cAACpB,EAAD,CACEW,MAAO,CACLC,EAAE,KACFC,IAAI,QAENC,aAAc,SAAAvB,GAAK,gBAAOA,EAAP,MACnBwB,SAAU,CACRC,UAAW,MACXC,SAAS,GAEX1B,MAAOa,EAAaX,SACpByB,IAAK,IACLrB,SAAU,SAAAN,GACRc,GAAgB,SAAAc,GAChB,OAAO,2BAAKA,GAAZ,IAAuB1B,SAAUF,QAGnC6B,UAAU,mBACZ,cAACpB,EAAD,CACEW,MAAO,CACLC,EAAE,KACFC,IAAI,QAENC,aAAc,SAAAvB,GAAK,gBAAOA,EAAP,MACnBwB,SAAU,CACRC,UAAW,SACXC,SAAS,GAEX1B,MAAOa,EAAaT,WACpBuB,IAAK,IACLrB,SAAU,SAAAN,GACRc,GAAgB,SAAAc,GAChB,OAAO,2BAAKA,GAAZ,IAAuBxB,WAAYJ,QAGrC6B,UAAU,qBACZ,cAACpB,EAAD,CACEW,MAAO,CACLC,EAAE,KACFC,IAAI,QAENC,aAAc,SAAAvB,GAAK,gBAAOA,EAAP,MACnBwB,SAAU,CACRC,UAAW,SACXC,SAAS,GAEX1B,MAAOa,EAAaV,YACpBwB,IAAK,IACLrB,SAAU,SAAAN,GACRc,GAAgB,SAAAc,GAChB,OAAO,2BAAKA,GAAZ,IAAuBzB,YAAaH,QAGtC6B,UAAU,sBACV,sBAAKxB,GAAG,iBAAR,UACE,oBAAIA,GAAG,yBAAP,oCACA,cAAC,EAAD,CAAuBL,MAAOa,WCnFvBiB,MARf,WACE,OACE,qBAAKD,UAAU,MAAf,SACE,cAAC,EAAD,OCMSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c8b1d077.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nimport '../style/border_radius_clipboard.css';\n\n\nconst BorderRadiusClipboard = (props) => {\n  const [clipboardText, copyToClipboard] = useState(\"\");\n\n  useEffect(() => {\n    const value=`border-radius: ${props.value.topLeft}% ${props.value.topRight}% ${props.value.bottomRight}% ${props.value.bottomLeft}%;`\n       copyToClipboard(value);\n   }, [props])\n\n  return <div id=\"border-radius-clipboard\" >\n    <input id=\"border-radius-data\" value={clipboardText} onChange={({target: {value}}) => copyToClipboard(value)} />\n    <CopyToClipboard text={clipboardText}>\n      <button id=\"clipboard-btn\" >Copy to clipboard</button>\n    </CopyToClipboard>\n  </div>\n}\n\nexport default BorderRadiusClipboard;\n","import React, { useState } from \"react\";\nimport Slider, { createSliderWithTooltip } from \"rc-slider\";\nimport BorderRadiusClipboard from './border_radius_clipboard';\n\nimport 'rc-slider/assets/index.css';\n\nimport '../style/border_square.css';\n\nconst SliderWithTooltip = createSliderWithTooltip(Slider);\n\nconst BorderSquare = () => {\n  const [borderRadius, setBorderRadius] = useState(\n  {\n    topLeft: 30,\n    topRight: 10,\n    bottomLeft: 90,\n    bottomRight: 40,\n  });\n\n  return <div style={{borderTopLeftRadius: `${borderRadius.topLeft}%`, borderTopRightRadius: `${borderRadius.topRight}%`, borderBottomLeftRadius: `${borderRadius.bottomLeft}%`, borderBottomRightRadius: `${borderRadius.bottomRight}%`}} id=\"border_square\">\n    <SliderWithTooltip\n      marks={{\n        0: `0%`,\n        100: `100%`\n      }}\n      tipFormatter={value => `${value}%`}\n      tipProps={{\n        placement: 'top',\n        visible: true,\n      }}\n      value={borderRadius.topLeft}\n      max={100}\n      onChange={value => {\n        setBorderRadius(prevState => {\n        return { ...prevState, topLeft: value }\n        });\n      }}\n      className=\"sliderTopLeft\" />\n    <SliderWithTooltip\n      marks={{\n        0: `0%`,\n        100: `100%`\n      }}\n      tipFormatter={value => `${value}%`}\n      tipProps={{\n        placement: 'top',\n        visible: true,\n      }}\n      value={borderRadius.topRight}\n      max={100}\n      onChange={value => {\n        setBorderRadius(prevState => {\n        return { ...prevState, topRight: value }\n        });\n      }}\n      className=\"sliderTopRight\" />\n    <SliderWithTooltip\n      marks={{\n        0: `0%`,\n        100: `100%`\n      }}\n      tipFormatter={value => `${value}%`}\n      tipProps={{\n        placement: 'bottom',\n        visible: true,\n      }}\n      value={borderRadius.bottomLeft}\n      max={100}\n      onChange={value => {\n        setBorderRadius(prevState => {\n        return { ...prevState, bottomLeft: value }\n        });\n      }}\n      className=\"sliderBottomLeft\" />\n    <SliderWithTooltip\n      marks={{\n        0: `0%`,\n        100: `100%`\n      }}\n      tipFormatter={value => `${value}%`}\n      tipProps={{\n        placement: 'bottom',\n        visible: true,\n      }}\n      value={borderRadius.bottomRight}\n      max={100}\n      onChange={value => {\n        setBorderRadius(prevState => {\n        return { ...prevState, bottomRight: value }\n        });\n      }}\n      className=\"sliderBottomRight\" />\n      <div id=\"circle-content\" >\n        <h3 id=\"square-content-heading\" >Border Radius Reviewer</h3>\n        <BorderRadiusClipboard value={borderRadius} />\n      </div>\n  </div>\n};\n\n\nexport default BorderSquare;\n","import './App.css';\nimport BorderSquare from './components/border_square';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BorderSquare/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}